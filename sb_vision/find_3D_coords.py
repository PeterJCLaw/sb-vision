"""
Handlers for detecting 3D marker Location.

Also handles loading the calibration file which is passed into the
location finding function.
"""

import functools
import re
from pathlib import Path
from typing import List, Sequence, Tuple, cast

import numpy as np
from lxml import etree

from sb_vision.coordinates import Cartesian, PixelCoordinate
from sb_vision.native import _cv3d


def _get_values_from_xml_element(element: etree.Element) -> List[str]:
    """Parse an xml tag with space-separated variables."""
    text = []  # type: List[str]
    for e in element.itertext():
        e = e.strip()
        if e:
            text += re.split(r'\s+', e)
    return text


def convert(element: etree.Element) -> List[List[np.float64]]:
    """Converts an element containing an OpenCV matrix to python lists."""
    type_id = element.attrib.get('type_id')
    if type_id == 'opencv-matrix':
        data_type = element.find('dt').text
        if data_type != 'd':  # doubles
            raise ValueError('Invalid data type in element {}'.format(
                element.tag,
            ))
        rows = int(element.find('rows').text)
        cols = int(element.find('cols').text)

        values = _get_values_from_xml_element(element.find('data'))
        data = cast(List[List[np.float64]], np.reshape(
            [float(v) for v in values],
            (rows, cols),
        ).tolist())
        return data
    else:
        raise ValueError('Unexpected type_id of tag ({})'.format(type_id))


def get_calibration(file_name: Path) -> Tuple[List[List[float]], List[List[float]]]:
    """
    Parse a calibration xml generated by the camera calibration tool.

    (see https://docs.opencv.org/3.4.0/d7/d21/tutorial_interactive_calibration.html)
    :param file_name: name of xml file to parse
    :return: calibrations from the file in a dictionary
    """
    with file_name.open() as file:
        tree = etree.parse(file)
        camera_matrix = convert(tree.find('cameraMatrix'))
        dist_coeffs = convert(tree.find('dist_coeffs'))

    return camera_matrix, dist_coeffs


@functools.lru_cache()
def load_camera_calibrations(camera_model: str) -> Tuple[List[List[float]],
                                                         List[List[float]]]:
    """
    Load camera calibrations from a file.

    :param camera_model: file to load
    :return: camera calibrations
    """
    builtin_models_dir = Path(__file__).parent
    model_file = builtin_models_dir / '{}_calibration.xml'.format(
        camera_model,
    )

    camera_matrix, distance_coefficients = get_calibration(model_file)
    return camera_matrix, distance_coefficients


def ffi_float_matrix(values: Sequence[Sequence[float]]):
    if not values:
        raise ValueError("Refusing to create ffi matrix for empty 'values'.")

    lengths = list(set(len(x) for x in values))
    if len(lengths) != 1:
        raise ValueError(
            "'values' is not rectangular (got row lengths of {} and {})".format(
                ", ".join(str(x) for x in lengths[:-1]),
                lengths[-1],
            ),
        )

    flattened_values = sum([tuple(x) for x in values], ())
    count = len(values) * lengths[0]

    return _cv3d.ffi.new('float[{}]'.format(count), flattened_values)


def calculate_transforms(
    marker_size: Tuple[float, float],
    pixel_corners: List[PixelCoordinate],
    camera_matrix: List[List[float]],
    distance_coefficients: List[List[float]],
) -> Tuple[Cartesian, Tuple[float, float, float]]:
    """
    Calculate the position of a marker.

    Given the pixel co-ordinates of the corners and the calibrations
    of the camera.

    :param marker_size: size of the marker
    :param pixel_corners: pixel co-ordinates of the corners of the marker
        (clockwise around the marker from the top-left corner)
    :param camera_matrix: calibration matrix for the camera
    :param distance_coefficients: distance calibration for the camera
    :return: translation and orientation of the marker
    """
    w, h = marker_size
    width_from_centre = w / 2
    height_from_centre = h / 2

    # create the rectangle representing the marker in 3D
    object_points = ffi_float_matrix([
        [width_from_centre, height_from_centre, 0],
        [width_from_centre, -height_from_centre, 0],
        [-width_from_centre, -height_from_centre, 0],
        [-width_from_centre, height_from_centre, 0],
    ])

    orientation_vector = ffi_float_matrix([[0] * 3])
    translation_vector = ffi_float_matrix([[0] * 3])

    return_value = _cv3d.lib.solve_pnp(
        object_points,
        ffi_float_matrix(pixel_corners),
        ffi_float_matrix(camera_matrix),
        ffi_float_matrix(distance_coefficients),
        orientation_vector,
        translation_vector,
    )
    if not return_value:
        raise ValueError("cv2.solvePnP returned false")

    translation_vector = Cartesian(*translation_vector)

    orientation_vector = tuple(orientation_vector)

    return translation_vector, orientation_vector
